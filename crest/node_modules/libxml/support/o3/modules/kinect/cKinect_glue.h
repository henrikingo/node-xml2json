#ifdef O3_WITH_GLUE
#pragma warning( disable : 4100)
#pragma warning( disable : 4189)
namespace o3 {


Trait* cDepthBuffer::select()
{
   return clsTraits();
}

Trait* cDepthBuffer::clsTraits()
{
      static Trait TRAITS[] = {
         {      0,      Trait::TYPE_BEGIN,      "cDepthBuffer",       0,                    0,              0,      cScr::clsTraits()  },
         {      0,      Trait::TYPE_END,        "cDepthBuffer",       0,                    0,              0,      0                  },
      };

      return TRAITS;
}

Trait* cDepthBuffer::extTraits()
{
      static Trait TRAITS[] = {
         {      0,      Trait::TYPE_BEGIN,      "cDepthBuffer",       0,                    0,              0,      0                  },
         {      0,      Trait::TYPE_END,        "cDepthBuffer",       0,                    0,              0,      0                  },
      };

      return TRAITS;
}

siEx cDepthBuffer::clsInvoke(iScr* pthis, iCtx* ctx, int index, int argc,
           const Var* argv, Var* rval)
{
      siEx ex;
      return ex;
}

siEx cDepthBuffer::extInvoke(iScr* pthis, iCtx* ctx, int index, int argc,
           const Var* argv, Var* rval)
{
      siEx ex;
      return ex;
}

}
#endif
#pragma warning(default : 4100)
#pragma warning(default : 4189)
#ifdef O3_WITH_GLUE
#pragma warning( disable : 4100)
#pragma warning( disable : 4189)
namespace o3 {


Trait* cKinect::select()
{
   return clsTraits();
}

Trait* cKinect::clsTraits()
{
      static Trait TRAITS[] = {
         {      0,      Trait::TYPE_BEGIN,      "cKinect",            0,                    0,              0,      cScr::clsTraits()  },
         {      0,      Trait::TYPE_FUN,        "cKinect",            "processEvents",      clsInvoke,      0,      0                  },
         {      1,      Trait::TYPE_FUN,        "cKinect",            "newDepthAvailable",  clsInvoke,      1,      0                  },
         {      2,      Trait::TYPE_FUN,        "cKinect",            "newRGBAvailable",    clsInvoke,      2,      0                  },
         {      3,      Trait::TYPE_FUN,        "cKinect",            "depthToCM",          clsInvoke,      3,      0                  },
         {      4,      Trait::TYPE_FUN,        "cKinect",            "CMToDepth",          clsInvoke,      4,      0                  },
         {      5,      Trait::TYPE_FUN,        "cKinect",            "blobX",              clsInvoke,      5,      0                  },
         {      6,      Trait::TYPE_FUN,        "cKinect",            "blobY",              clsInvoke,      6,      0                  },
         {      7,      Trait::TYPE_FUN,        "cKinect",            "blobZ",              clsInvoke,      7,      0                  },
         {      8,      Trait::TYPE_FUN,        "cKinect",            "blobSize",           clsInvoke,      8,      0                  },
         {      9,      Trait::TYPE_FUN,        "cKinect",            "blobCount",          clsInvoke,      9,      0                  },
         {      10,     Trait::TYPE_FUN,        "cKinect",            "findBlobs",          clsInvoke,      10,     0                  },
         {      11,     Trait::TYPE_FUN,        "cKinect",            "depthThreshold",     clsInvoke,      11,     0                  },
         {      12,     Trait::TYPE_FUN,        "cKinect",            "RGBToCanvas",        clsInvoke,      12,     0                  },
         {      13,     Trait::TYPE_FUN,        "cKinect",            "DepthToCanvas",      clsInvoke,      13,     0                  },
         {      14,     Trait::TYPE_FUN,        "cKinect",            "DepthToVBO",         clsInvoke,      14,     0                  },
         {      0,      Trait::TYPE_END,        "cKinect",            0,                    0,              0,      0                  },
      };

      return TRAITS;
}

Trait* cKinect::extTraits()
{
      static Trait TRAITS[] = {
         {      0,      Trait::TYPE_BEGIN,      "cKinect",            0,                    0,              0,      0                  },
         {      0,      Trait::TYPE_FUN,        "cO3",                "kinect",             extInvoke,      0,      0                  },
         {      0,      Trait::TYPE_END,        "cKinect",            0,                    0,              0,      0                  },
      };

      return TRAITS;
}

siEx cKinect::clsInvoke(iScr* pthis, iCtx* ctx, int index, int argc,
           const Var* argv, Var* rval)
{
      siEx ex;
      cKinect* pthis1 = (cKinect*) pthis;

      switch(index) {
         case 0:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( processEvents )");
            pthis1->processEvents();
            break;
         case 1:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( newDepthAvailable )");
            *rval = pthis1->newDepthAvailable();
            break;
         case 2:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( newRGBAvailable )");
            *rval = pthis1->newRGBAvailable();
            break;
         case 3:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( depthToCM )");
            *rval = pthis1->depthToCM(argv[0].toInt32());
            break;
         case 4:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( CMToDepth )");
            *rval = pthis1->CMToDepth(argv[0].toDouble());
            break;
         case 5:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( blobX )");
            *rval = pthis1->blobX(argv[0].toInt32());
            break;
         case 6:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( blobY )");
            *rval = pthis1->blobY(argv[0].toInt32());
            break;
         case 7:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( blobZ )");
            *rval = pthis1->blobZ(argv[0].toInt32());
            break;
         case 8:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( blobSize )");
            *rval = pthis1->blobSize(argv[0].toInt32());
            break;
         case 9:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( blobCount )");
            *rval = pthis1->blobCount();
            break;
         case 10:
            if (argc < 2 && argc > 4)
               return o3_new(cEx)("Invalid argument count. ( findBlobs )");
            *rval = pthis1->findBlobs(argv[0].toInt32(),argv[1].toInt32(),argc > 2 ? argv[2].toInt32() : 10,argc > 3 ? argv[3].toInt32() : 2);
            break;
         case 11:
            if (argc != 3)
               return o3_new(cEx)("Invalid argument count. ( depthThreshold )");
            pthis1->depthThreshold(argv[0].toScr(),argv[1].toInt32(),argv[2].toInt32());
            break;
         case 12:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( RGBToCanvas )");
            pthis1->RGBToCanvas(argv[0].toScr());
            break;
         case 13:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( DepthToCanvas )");
            pthis1->DepthToCanvas(argv[0].toScr());
            break;
         case 14:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( DepthToVBO )");
            pthis1->DepthToVBO(argv[0].toScr());
            break;
      }
      return ex;
}

siEx cKinect::extInvoke(iScr* pthis, iCtx* ctx, int index, int argc,
           const Var* argv, Var* rval)
{
      siEx ex;
      cKinect* pthis1 = (cKinect*) pthis;

      switch(index) {
         case 0:
            if (argc > 1)
               return o3_new(cEx)("Invalid argument count. ( kinect )");
            *rval = pthis1->kinect(argc > 0 ? argv[0].toInt32() : 0);
            break;
      }
      return ex;
}

}
#endif
#pragma warning(default : 4100)
#pragma warning(default : 4189)
