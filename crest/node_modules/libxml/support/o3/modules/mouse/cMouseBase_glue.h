#ifdef O3_WITH_GLUE
#pragma warning( disable : 4100)
#pragma warning( disable : 4189)
namespace o3 {


Trait* cMouseBase::select()
{
   return clsTraits();
}

Trait* cMouseBase::clsTraits()
{
      static Trait TRAITS[] = {
         {      0,      Trait::TYPE_BEGIN,      "cMouseBase",         0,                    0,              0,      cScr::clsTraits()  },
         {      0,      Trait::TYPE_FUN,        "cMouseBase",         "sendMouseMoved",     clsInvoke,      0,      0                  },
         {      1,      Trait::TYPE_FUN,        "cMouseBase",         "sendLeftMouseDown",  clsInvoke,      1,      0                  },
         {      2,      Trait::TYPE_FUN,        "cMouseBase",         "sendLeftMouseUp",    clsInvoke,      2,      0                  },
         {      3,      Trait::TYPE_FUN,        "cMouseBase",         "sendLeftMouseClicked",clsInvoke,      3,      0                  },
         {      4,      Trait::TYPE_FUN,        "cMouseBase",         "sendRightMouseDown", clsInvoke,      4,      0                  },
         {      5,      Trait::TYPE_FUN,        "cMouseBase",         "sendRightMouseUp",   clsInvoke,      5,      0                  },
         {      6,      Trait::TYPE_FUN,        "cMouseBase",         "sendRightMouseClicked",clsInvoke,      6,      0                  },
         {      7,      Trait::TYPE_FUN,        "cMouseBase",         "sendMouseScrolled",  clsInvoke,      7,      0                  },
         {      0,      Trait::TYPE_END,        "cMouseBase",         0,                    0,              0,      0                  },
      };

      return TRAITS;
}

Trait* cMouseBase::extTraits()
{
      static Trait TRAITS[] = {
         {      0,      Trait::TYPE_BEGIN,      "cMouseBase",         0,                    0,              0,      0                  },
         {      0,      Trait::TYPE_END,        "cMouseBase",         0,                    0,              0,      0                  },
      };

      return TRAITS;
}

siEx cMouseBase::clsInvoke(iScr* pthis, iCtx* ctx, int index, int argc,
           const Var* argv, Var* rval)
{
      siEx ex;
      cMouseBase* pthis1 = (cMouseBase*) pthis;

      switch(index) {
         case 0:
            if (argc != 2)
               return o3_new(cEx)("Invalid argument count. ( sendMouseMoved )");
            pthis1->sendMouseMoved(argv[0].toInt32(),argv[1].toInt32());
            break;
         case 1:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( sendLeftMouseDown )");
            pthis1->sendLeftMouseDown();
            break;
         case 2:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( sendLeftMouseUp )");
            pthis1->sendLeftMouseUp();
            break;
         case 3:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( sendLeftMouseClicked )");
            pthis1->sendLeftMouseClicked();
            break;
         case 4:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( sendRightMouseDown )");
            pthis1->sendRightMouseDown();
            break;
         case 5:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( sendRightMouseUp )");
            pthis1->sendRightMouseUp();
            break;
         case 6:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( sendRightMouseClicked )");
            pthis1->sendRightMouseClicked();
            break;
         case 7:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( sendMouseScrolled )");
            pthis1->sendMouseScrolled(argv[0].toInt32());
            break;
      }
      return ex;
}

siEx cMouseBase::extInvoke(iScr* pthis, iCtx* ctx, int index, int argc,
           const Var* argv, Var* rval)
{
      siEx ex;
      return ex;
}

}
#endif
#pragma warning(default : 4100)
#pragma warning(default : 4189)
