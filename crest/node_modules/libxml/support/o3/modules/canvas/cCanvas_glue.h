#ifdef O3_WITH_GLUE
#pragma warning( disable : 4100)
#pragma warning( disable : 4189)
namespace o3 {


Trait* cCanvas::select()
{
   return clsTraits();
}

Trait* cCanvas::clsTraits()
{
      static Trait TRAITS[] = {
         {      0,      Trait::TYPE_BEGIN,      "cCanvas",            0,                    0,              0,      cScr::clsTraits()  },
         {      0,      Trait::TYPE_GET,        "cCanvas",            "mode",               clsInvoke,      0,      0                  },
         {      1,      Trait::TYPE_GET,        "cCanvas",            "x",                  clsInvoke,      1,      0                  },
         {      2,      Trait::TYPE_GET,        "cCanvas",            "y",                  clsInvoke,      2,      0                  },
         {      3,      Trait::TYPE_GET,        "cCanvas",            "width",              clsInvoke,      3,      0                  },
         {      4,      Trait::TYPE_GET,        "cCanvas",            "height",             clsInvoke,      4,      0                  },
         {      5,      Trait::TYPE_FUN,        "cCanvas",            "clear",              clsInvoke,      5,      0                  },
         {      6,      Trait::TYPE_FUN,        "cCanvas",            "setPixel",           clsInvoke,      6,      0                  },
         {      7,      Trait::TYPE_FUN,        "cCanvas",            "getPixel",           clsInvoke,      7,      0                  },
         {      8,      Trait::TYPE_FUN,        "cCanvas",            "img_rect",           clsInvoke,      8,      0                  },
         {      9,      Trait::TYPE_FUN,        "cCanvas",            "img_line",           clsInvoke,      9,      0                  },
         {      10,     Trait::TYPE_SET,        "cCanvas",            "src",                clsInvoke,      10,     0                  },
         {      10,     Trait::TYPE_SET,        "cCanvas",            "src",                clsInvoke,      11,     0                  },
         {      11,     Trait::TYPE_SET,        "cCanvas",            "srcJPG",             clsInvoke,      12,     0                  },
         {      12,     Trait::TYPE_FUN,        "cCanvas",            "jpgBuffer",          clsInvoke,      13,     0                  },
         {      13,     Trait::TYPE_SET,        "cCanvas",            "srcPNG",             clsInvoke,      14,     0                  },
         {      14,     Trait::TYPE_FUN,        "cCanvas",            "savePng_FS",         clsInvoke,      15,     0                  },
         {      15,     Trait::TYPE_FUN,        "cCanvas",            "pngBuffer",          clsInvoke,      16,     0                  },
         {      16,     Trait::TYPE_SET,        "cCanvas",            "shadowOffsetX",      clsInvoke,      17,     0                  },
         {      17,     Trait::TYPE_SET,        "cCanvas",            "shadowOffsetY",      clsInvoke,      18,     0                  },
         {      18,     Trait::TYPE_SET,        "cCanvas",            "shadowBlur",         clsInvoke,      19,     0                  },
         {      19,     Trait::TYPE_SET,        "cCanvas",            "shadowColor",        clsInvoke,      20,     0                  },
         {      20,     Trait::TYPE_SET,        "cCanvas",            "globalCompositeOperation",clsInvoke,      21,     0                  },
         {      21,     Trait::TYPE_SET,        "cCanvas",            "fillStyle",          clsInvoke,      22,     0                  },
         {      22,     Trait::TYPE_SET,        "cCanvas",            "strokeStyle",        clsInvoke,      23,     0                  },
         {      23,     Trait::TYPE_FUN,        "cCanvas",            "createLinearGradient",clsInvoke,      24,     0                  },
         {      24,     Trait::TYPE_FUN,        "cCanvas",            "createRadialGradient",clsInvoke,      25,     0                  },
         {      25,     Trait::TYPE_SET,        "cCanvas",            "lineWidth",          clsInvoke,      26,     0                  },
         {      26,     Trait::TYPE_SET,        "cCanvas",            "lineCap",            clsInvoke,      27,     0                  },
         {      27,     Trait::TYPE_SET,        "cCanvas",            "lineJoin",           clsInvoke,      28,     0                  },
         {      28,     Trait::TYPE_SET,        "cCanvas",            "miterLimit",         clsInvoke,      29,     0                  },
         {      29,     Trait::TYPE_SET,        "cCanvas",            "globalAlpha",        clsInvoke,      30,     0                  },
         {      30,     Trait::TYPE_GET,        "cCanvas",            "onSetFont",          clsInvoke,      31,     0                  },
         {      30,     Trait::TYPE_SET,        "cCanvas",            "onSetFont",          clsInvoke,      32,     0                  },
         {      31,     Trait::TYPE_SET,        "cCanvas",            "font",               clsInvoke,      33,     0                  },
         {      31,     Trait::TYPE_GET,        "cCanvas",            "font",               clsInvoke,      34,     0                  },
         {      32,     Trait::TYPE_SET,        "cCanvas",            "fontFamily",         clsInvoke,      35,     0                  },
         {      33,     Trait::TYPE_SET,        "cCanvas",            "fontSize",           clsInvoke,      36,     0                  },
         {      34,     Trait::TYPE_SET,        "cCanvas",            "fontStyle",          clsInvoke,      37,     0                  },
         {      35,     Trait::TYPE_SET,        "cCanvas",            "fontVariant",        clsInvoke,      38,     0                  },
         {      36,     Trait::TYPE_SET,        "cCanvas",            "fontWeight",         clsInvoke,      39,     0                  },
         {      37,     Trait::TYPE_SET,        "cCanvas",            "textDirectionality", clsInvoke,      40,     0                  },
         {      38,     Trait::TYPE_SET,        "cCanvas",            "textAlign",          clsInvoke,      41,     0                  },
         {      39,     Trait::TYPE_SET,        "cCanvas",            "textBaseline",       clsInvoke,      42,     0                  },
         {      40,     Trait::TYPE_FUN,        "cCanvas",            "fillText",           clsInvoke,      43,     0                  },
         {      40,     Trait::TYPE_FUN,        "cCanvas",            "fillText",           clsInvoke,      44,     0                  },
         {      41,     Trait::TYPE_FUN,        "cCanvas",            "strokeText",         clsInvoke,      45,     0                  },
         {      41,     Trait::TYPE_FUN,        "cCanvas",            "strokeText",         clsInvoke,      46,     0                  },
         {      42,     Trait::TYPE_FUN,        "cCanvas",            "measureText",        clsInvoke,      47,     0                  },
         {      43,     Trait::TYPE_FUN,        "cCanvas",            "clearRect",          clsInvoke,      48,     0                  },
         {      44,     Trait::TYPE_FUN,        "cCanvas",            "fillRect",           clsInvoke,      49,     0                  },
         {      45,     Trait::TYPE_FUN,        "cCanvas",            "strokeRect",         clsInvoke,      50,     0                  },
         {      46,     Trait::TYPE_FUN,        "cCanvas",            "closePath",          clsInvoke,      51,     0                  },
         {      47,     Trait::TYPE_FUN,        "cCanvas",            "beginPath",          clsInvoke,      52,     0                  },
         {      48,     Trait::TYPE_FUN,        "cCanvas",            "fill",               clsInvoke,      53,     0                  },
         {      49,     Trait::TYPE_FUN,        "cCanvas",            "stroke",             clsInvoke,      54,     0                  },
         {      50,     Trait::TYPE_FUN,        "cCanvas",            "rect",               clsInvoke,      55,     0                  },
         {      51,     Trait::TYPE_FUN,        "cCanvas",            "moveTo",             clsInvoke,      56,     0                  },
         {      52,     Trait::TYPE_FUN,        "cCanvas",            "lineTo",             clsInvoke,      57,     0                  },
         {      53,     Trait::TYPE_FUN,        "cCanvas",            "arc",                clsInvoke,      58,     0                  },
         {      54,     Trait::TYPE_FUN,        "cCanvas",            "quadraticCurveTo",   clsInvoke,      59,     0                  },
         {      55,     Trait::TYPE_FUN,        "cCanvas",            "bezierCurveTo",      clsInvoke,      60,     0                  },
         {      56,     Trait::TYPE_FUN,        "cCanvas",            "save",               clsInvoke,      61,     0                  },
         {      57,     Trait::TYPE_FUN,        "cCanvas",            "restore",            clsInvoke,      62,     0                  },
         {      58,     Trait::TYPE_FUN,        "cCanvas",            "setTransform",       clsInvoke,      63,     0                  },
         {      59,     Trait::TYPE_FUN,        "cCanvas",            "transform",          clsInvoke,      64,     0                  },
         {      60,     Trait::TYPE_FUN,        "cCanvas",            "translate",          clsInvoke,      65,     0                  },
         {      61,     Trait::TYPE_FUN,        "cCanvas",            "rotate",             clsInvoke,      66,     0                  },
         {      62,     Trait::TYPE_FUN,        "cCanvas",            "scale",              clsInvoke,      67,     0                  },
         {      63,     Trait::TYPE_FUN,        "cCanvas",            "clip",               clsInvoke,      68,     0                  },
         {      0,      Trait::TYPE_END,        "cCanvas",            0,                    0,              0,      0                  },
      };

      return TRAITS;
}

Trait* cCanvas::extTraits()
{
      static Trait TRAITS[] = {
         {      0,      Trait::TYPE_BEGIN,      "cCanvas",            0,                    0,              0,      0                  },
         {      0,      Trait::TYPE_FUN,        "cO3",                "canvas",             extInvoke,      0,      0                  },
         {      0,      Trait::TYPE_END,        "cCanvas",            0,                    0,              0,      0                  },
      };

      return TRAITS;
}

siEx cCanvas::clsInvoke(iScr* pthis, iCtx* ctx, int index, int argc,
           const Var* argv, Var* rval)
{
      siEx ex;
      cCanvas* pthis1 = (cCanvas*) pthis;

      switch(index) {
         case 0:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( mode )");
            *rval = pthis1->mode();
            break;
         case 1:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( x )");
            *rval = pthis1->x();
            break;
         case 2:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( y )");
            *rval = pthis1->y();
            break;
         case 3:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( width )");
            *rval = pthis1->width();
            break;
         case 4:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( height )");
            *rval = pthis1->height();
            break;
         case 5:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( clear )");
            pthis1->clear(argv[0].toInt32());
            break;
         case 6:
            if (argc != 3)
               return o3_new(cEx)("Invalid argument count. ( setPixel )");
            pthis1->setPixel(argv[0].toInt32(),argv[1].toInt32(),argv[2].toInt32());
            break;
         case 7:
            if (argc != 2)
               return o3_new(cEx)("Invalid argument count. ( getPixel )");
            *rval = pthis1->getPixel(argv[0].toInt32(),argv[1].toInt32());
            break;
         case 8:
            if (argc != 5)
               return o3_new(cEx)("Invalid argument count. ( img_rect )");
            pthis1->img_rect(argv[0].toInt32(),argv[1].toInt32(),argv[2].toInt32(),argv[3].toInt32(),argv[4].toInt32());
            break;
         case 9:
            if (argc != 5)
               return o3_new(cEx)("Invalid argument count. ( img_line )");
            pthis1->img_line(argv[0].toInt32(),argv[1].toInt32(),argv[2].toInt32(),argv[3].toInt32(),argv[4].toInt32());
            break;
         case 10:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( src )");
            *rval = o3_new(cScrBuf)(pthis1->src(Buf(siBuf(argv[0].toScr())),&ex));
            break;
         case 11:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( src )");
            *rval = siFs(pthis1->src(siFs (argv[0].toScr()),&ex));
            break;
         case 12:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( srcJPG )");
            *rval = o3_new(cScrBuf)(pthis1->srcJPG(Buf(siBuf(argv[0].toScr()))));
            break;
         case 13:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( jpgBuffer )");
            *rval = o3_new(cScrBuf)(pthis1->jpgBuffer());
            break;
         case 14:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( srcPNG )");
            *rval = o3_new(cScrBuf)(pthis1->srcPNG(Buf(siBuf(argv[0].toScr())),&ex));
            break;
         case 15:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( savePng_FS )");
            *rval = pthis1->savePng_FS(siFs (argv[0].toScr()),&ex);
            break;
         case 16:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( pngBuffer )");
            *rval = o3_new(cScrBuf)(pthis1->pngBuffer(&ex));
            break;
         case 17:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( setShadowOffsetX )");
            pthis1->setShadowOffsetX(argv[0].toDouble());
            break;
         case 18:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( setShadowOffsetY )");
            pthis1->setShadowOffsetY(argv[0].toDouble());
            break;
         case 19:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( setShadowBlur )");
            pthis1->setShadowBlur(argv[0].toDouble());
            break;
         case 20:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( setShadowColor )");
            pthis1->setShadowColor(argv[0].toStr());
            break;
         case 21:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( setGlobalCompositeOperation )");
            pthis1->setGlobalCompositeOperation(argv[0].toStr());
            break;
         case 22:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( fillStyle )");
            pthis1->fillStyle(argv[0]);
            break;
         case 23:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( strokeStyle )");
            pthis1->strokeStyle(argv[0]);
            break;
         case 24:
            if (argc != 4)
               return o3_new(cEx)("Invalid argument count. ( createLinearGradient )");
            *rval = pthis1->createLinearGradient(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble());
            break;
         case 25:
            if (argc != 6)
               return o3_new(cEx)("Invalid argument count. ( createRadialGradient )");
            *rval = pthis1->createRadialGradient(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble(),argv[4].toDouble(),argv[5].toDouble());
            break;
         case 26:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( lineWidth )");
            pthis1->lineWidth(argv[0].toDouble());
            break;
         case 27:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( lineCap )");
            pthis1->lineCap(argv[0].toStr());
            break;
         case 28:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( lineJoin )");
            pthis1->lineJoin(argv[0].toStr());
            break;
         case 29:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( miterLimit )");
            pthis1->miterLimit(argv[0].toDouble());
            break;
         case 30:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( globalAlpha )");
            pthis1->globalAlpha(argv[0].toDouble());
            break;
         case 31:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( onSetFont )");
            *rval = pthis1->onSetFont();
            break;
         case 32:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( onSetFont )");
            *rval = pthis1->onSetFont(argv[0].toScr());
            break;
         case 33:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( setFont )");
            pthis1->setFont(argv[0].toStr(),ctx);
            break;
         case 34:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( font )");
            *rval = pthis1->font();
            break;
         case 35:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( fontFamily )");
            pthis1->fontFamily(argv[0].toStr());
            break;
         case 36:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( fontSize )");
            pthis1->fontSize(argv[0].toStr());
            break;
         case 37:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( fontStyle )");
            pthis1->fontStyle(argv[0].toStr());
            break;
         case 38:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( fontVariant )");
            pthis1->fontVariant(argv[0].toStr());
            break;
         case 39:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( fontWeight )");
            pthis1->fontWeight(argv[0].toStr());
            break;
         case 40:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( textDirectionality )");
            pthis1->textDirectionality(argv[0].toStr());
            break;
         case 41:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( textAlign )");
            pthis1->textAlign(argv[0].toStr());
            break;
         case 42:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( textBaseline )");
            pthis1->textBaseline(argv[0].toStr());
            break;
         case 43:
            if (argc==3) {
               pthis1->fillText(argv[0].toStr(),argv[1].toDouble(),argv[2].toDouble());
            }
            else if(argc==4) {
               pthis1->fillText(argv[0].toStr(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble());
            }
            else{
               return o3_new(cEx)("Invalid argument count.");
            }
            break;
         case 45:
            if (argc==3) {
               pthis1->strokeText(argv[0].toStr(),argv[1].toDouble(),argv[2].toDouble());
            }
            else if(argc==4) {
               pthis1->strokeText(argv[0].toStr(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble());
            }
            else{
               return o3_new(cEx)("Invalid argument count.");
            }
            break;
         case 47:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( measureText )");
            *rval = pthis1->measureText(argv[0].toStr());
            break;
         case 48:
            if (argc != 4)
               return o3_new(cEx)("Invalid argument count. ( clearRect )");
            pthis1->clearRect(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble());
            break;
         case 49:
            if (argc != 4)
               return o3_new(cEx)("Invalid argument count. ( fillRect )");
            pthis1->fillRect(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble());
            break;
         case 50:
            if (argc != 4)
               return o3_new(cEx)("Invalid argument count. ( strokeRect )");
            pthis1->strokeRect(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble());
            break;
         case 51:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( closePath )");
            pthis1->closePath();
            break;
         case 52:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( beginPath )");
            pthis1->beginPath();
            break;
         case 53:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( fill )");
            pthis1->fill();
            break;
         case 54:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( stroke )");
            pthis1->stroke();
            break;
         case 55:
            if (argc != 4)
               return o3_new(cEx)("Invalid argument count. ( rect )");
            pthis1->rect(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble());
            break;
         case 56:
            if (argc != 2)
               return o3_new(cEx)("Invalid argument count. ( moveTo )");
            pthis1->moveTo(argv[0].toDouble(),argv[1].toDouble());
            break;
         case 57:
            if (argc != 2)
               return o3_new(cEx)("Invalid argument count. ( lineTo )");
            pthis1->lineTo(argv[0].toDouble(),argv[1].toDouble());
            break;
         case 58:
            if (argc < 5 && argc > 6)
               return o3_new(cEx)("Invalid argument count. ( arc )");
            pthis1->arc(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble(),argv[4].toDouble(),argc > 5 ? argv[5].toBool() : false);
            break;
         case 59:
            if (argc != 4)
               return o3_new(cEx)("Invalid argument count. ( quadraticCurveTo )");
            pthis1->quadraticCurveTo(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble());
            break;
         case 60:
            if (argc != 6)
               return o3_new(cEx)("Invalid argument count. ( bezierCurveTo )");
            pthis1->bezierCurveTo(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble(),argv[4].toDouble(),argv[5].toDouble());
            break;
         case 61:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( save )");
            pthis1->save();
            break;
         case 62:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( restore )");
            pthis1->restore();
            break;
         case 63:
            if (argc != 6)
               return o3_new(cEx)("Invalid argument count. ( setTransform )");
            pthis1->setTransform(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble(),argv[4].toDouble(),argv[5].toDouble());
            break;
         case 64:
            if (argc != 6)
               return o3_new(cEx)("Invalid argument count. ( transform )");
            pthis1->transform(argv[0].toDouble(),argv[1].toDouble(),argv[2].toDouble(),argv[3].toDouble(),argv[4].toDouble(),argv[5].toDouble());
            break;
         case 65:
            if (argc != 2)
               return o3_new(cEx)("Invalid argument count. ( translate )");
            pthis1->translate(argv[0].toDouble(),argv[1].toDouble());
            break;
         case 66:
            if (argc != 1)
               return o3_new(cEx)("Invalid argument count. ( rotate )");
            pthis1->rotate(argv[0].toDouble());
            break;
         case 67:
            if (argc != 2)
               return o3_new(cEx)("Invalid argument count. ( scale )");
            pthis1->scale(argv[0].toDouble(),argv[1].toDouble());
            break;
         case 68:
            if (argc != 0)
               return o3_new(cEx)("Invalid argument count. ( clip )");
            pthis1->clip();
            break;
      }
      return ex;
}

siEx cCanvas::extInvoke(iScr* pthis, iCtx* ctx, int index, int argc,
           const Var* argv, Var* rval)
{
      siEx ex;
      cCanvas* pthis1 = (cCanvas*) pthis;

      switch(index) {
         case 0:
            if (argc < 2 && argc > 3)
               return o3_new(cEx)("Invalid argument count. ( canvas )");
            *rval = pthis1->canvas(argv[0].toInt32(),argv[1].toInt32(),argc > 2 ? argv[2].toStr() : "argb");
            break;
      }
      return ex;
}

}
#endif
#pragma warning(default : 4100)
#pragma warning(default : 4189)
